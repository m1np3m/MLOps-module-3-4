name: Feature store
inputs:
- {name: url, type: String}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'feast[redis, postgres]' 'scikit-learn==1.3.2'
      'SciPy==1.11.4' 'wget==3.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip
      install --quiet --no-warn-script-location 'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22'
      'feast[redis, postgres]' 'scikit-learn==1.3.2' 'SciPy==1.11.4' 'wget==3.2' --user)
      && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      feature_store = pickle.loads(base64.b64decode(b'gASVyQ8AAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwFLAEsASyRLBUtDQuYBAABkAWQAbAB9AWQBZABsAX0CZAFkAGwCfQNkAWQAbAN9BGQBZABsBH0FZAFkAmwEbQV9Bm0GfQcBAGQBZANsB20IfQgBAGQBZARsCW0KfQkBAGQBZAVsC20MfQoBAGQBZAZsA20NfQsBAGQBZABsDn0MZAFkAGwPfQ1kAWQHbBBtEX0OAQBkAWQIbARtEn0PbRN9EG0UfRFtFX0SbRZ9E20XfRRtGH0VAQBkAWQJbBltGn0WAQBkAWQKbBttHH0XbR19GG0efRkBAGQBZAlsGW0afRYBAGQBZApsG20cfRdtHX0YbR59GQEAfANqH3QgoCF0IqEBZAtkDI0CfRp8A6AjfBpkDRkAoQF8GmQNPABkDn0bZA99HGQQfR1kEX0edCRkDoMBaiVkEmQSZBONAgEAfA1qJnwcfBtkFI0CfR90J2QVfAFqKKApfB+hAZsAnQKDAQEAfA1qJnwdfBtkFI0CfSB0J2QWfAFqKKApfCChAZsAnQKDAQEAfA2gJnweoQF9IXQnZBd8AWoooCl8IaEBmwCdAoMBAQB8DaAmZBihAX0idCdkGXwBaiigKXwioQGbAJ0CgwEBAHwHZBpkG40BfSN0J2QcgwEBAHwMoCpkHWQeZwKhAQEAdCt8I2QfgwIBAGQAUwCUKE5LAIwKUmVwb0NvbmZpZ5SMDEZlYXR1cmVTdG9yZZSGlIwOUmVnaXN0cnlDb25maWeUhZSMHFBvc3RncmVTUUxPZmZsaW5lU3RvcmVDb25maWeUhZSMFlJlZGlzT25saW5lU3RvcmVDb25maWeUhZSMBGR1bXCUhZSMCXRpbWVkZWx0YZSFlCiMBkVudGl0eZSMDkZlYXR1cmVTZXJ2aWNllIwLRmVhdHVyZVZpZXeUjAVGaWVsZJSMCkZpbGVTb3VyY2WUjApQdXNoU291cmNllIwNUmVxdWVzdFNvdXJjZZR0lIwWb25fZGVtYW5kX2ZlYXR1cmVfdmlld5SFlIwHRmxvYXQzMpSMB0Zsb2F0NjSUjAVJbnQ2NJSHlIwBCZSMA3NlcJSFlIwPZXZlbnRfdGltZXN0YW1wlIwGLi9kYXRhlIxzaHR0cHM6Ly9naXRodWIuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L3Jhdy9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZGF0YS9yZWdpc3RyeS5kYpSMfGh0dHBzOi8vZ2l0aHViLmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9yYXcvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2RhdGEvZHJpdmVyX3N0YXRzLnBhcnF1ZXSUjIBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2ZlYXR1cmVfc3RvcmUueWFtbJSIjAdwYXJlbnRzlIwIZXhpc3Rfb2uUhpSMA291dJSFlIwVcmVnaXN0cnlfZGIgZXhpc3RlZDoglIweZHJpdmVyX3N0YXRzX3BhcnF1ZXQgZXhpc3RlZDoglIwcZmVhdHVyZV9zdG9yZS55YW1sIGV4aXN0ZWQ6IJSMfWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZXhhbXBsZV9yZXBvLnB5lIweZXhhbXBsZV9mZWF0dXJlX3JlcG8gZXhpc3RlZDoglIwBLpSMCXJlcG9fcGF0aJSFlIwYCi0tLSBSdW4gZmVhc3QgYXBwbHkgLS0tlIwFZmVhc3SUjAVhcHBseZSJdJQojAJvc5SMA3N5c5SMBnBhbmRhc5SMBmpvYmxpYpRoOmgJaAqMEWZlYXN0LnJlcG9fY29uZmlnlGgMjEJmZWFzdC5pbmZyYS5vZmZsaW5lX3N0b3Jlcy5jb250cmliLnBvc3RncmVzX29mZmxpbmVfc3RvcmUucG9zdGdyZXOUaA6MH2ZlYXN0LmluZnJhLm9ubGluZV9zdG9yZXMucmVkaXOUaBBoEowKc3VicHJvY2Vzc5SMBHdnZXSUjAhkYXRldGltZZRoFGgWaBdoGGgZaBpoG2gcjBxmZWFzdC5vbl9kZW1hbmRfZmVhdHVyZV92aWV3lGgejAtmZWFzdC50eXBlc5RoIGghaCKMCHJlYWRfY3N2lIwIREFUQV9VUkyUjAZmb3JtYXSUjBFEUklWRVJfT1JERVJTX0NTVpSMC3RvX2RhdGV0aW1llIwEUGF0aJSMBW1rZGlylIwIZG93bmxvYWSUjAVwcmludJSMBHBhdGiUjAZleGlzdHOUjANydW6UjCNmZXRjaF9oaXN0b3JpY2FsX2ZlYXR1cmVzX2VudGl0eV9kZpR0lCiMA3VybJRoPWg+jAJwZJRoQGg6aAloCmgMaA5oEGgSaERoRWgUaBZoF2gYaBloGmgbaBxoHmggaCFoIowGb3JkZXJzlIwJZGF0YV9wYXRolIwPcmVnaXN0cnlfZGJfdXJslIwYZHJpdmVyX3N0YXRzX3BhcnF1ZXRfdXJslIwRZmVhdHVyZV9zdG9yZV91cmyUjAtyZWdpc3RyeV9kYpSMFGRyaXZlcl9zdGF0c19wYXJxdWV0lIwVZmVhdHVyZV9zdG9yZV9wYXJxdWV0lIwUZXhhbXBsZV9mZWF0dXJlX3JlcG+UjAVzdG9yZZR0lIxrL2hvbWUvbWFucG0vRGV2ZWxvcGVycy9NTE9wcy1tb2R1bGUtMy00L21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS8uL2NvbXBvbmVudHMvZmVhdHVyZV9zdG9yZS9jb21wb25lbnQucHmUjA1mZWF0dXJlX3N0b3JllEsMQ0wQAQgBCAEIARABDAEMAQwDDAEIAQgBDAEkAQwKFAEMAhQBFAUSAQQBBAMEAQQBEgEOARYBDgEWAQoBFgEEAgIBBP8WAwoCCAEOAQ4ClCkpdJRSlH2UKIwLX19wYWNrYWdlX1+UTowIX19uYW1lX1+UjAhfX21haW5fX5SMCF9fZmlsZV9flGhkdU5OTnSUUpSMHGNsb3VkcGlja2xlLmNsb3VkcGlja2xlX2Zhc3SUjBJfZnVuY3Rpb25fc2V0c3RhdGWUk5Rob32UfZQoaGtoZYwMX19xdWFsbmFtZV9flGhljA9fX2Fubm90YXRpb25zX1+UfZRoV4wIYnVpbHRpbnOUjANzdHKUk5RzjA5fX2t3ZGVmYXVsdHNfX5ROjAxfX2RlZmF1bHRzX1+UTowKX19tb2R1bGVfX5RobIwHX19kb2NfX5ROjAtfX2Nsb3N1cmVfX5ROjBdfY2xvdWRwaWNrbGVfc3VibW9kdWxlc5RdlIwLX19nbG9iYWxzX1+UfZQoaEqMV2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mZWFzdC1kZXYvZmVhc3QtZ2NwLWRyaXZlci1yYW5raW5nLXR1dG9yaWFsL21hc3Rlci97fZRoTIwRZHJpdmVyX29yZGVycy5jc3aUaE6MB3BhdGhsaWKUaE6TlGhVaAIoaAcoSwJLAEsASwRLDEtDQ5R0AGoBoAJnAGQBogF0A2QCZANkBGQFZAZkB4MGdANkAmQDZARkCGQEZAWDBnQDZAJkA2QEZAlkCmQLgwZnA2cAZAyiAWcAZA2iAWcAZA6iAWQPnAWhAX0CfAFyN3QAagRkEGQRZBKNAnwCZBM8AHwAagV8AmcAZBSiAWQVjQKgBqEAfQN0B3wDoAihAIMBAQBkAFMAlChOTekDTeoDTesDh5RN5QdLBEsMSwpLO0sqSwhLEEsoSxpLAUsFSwOHlEsBSwJLA4eUSwpLFEseh5QojAlkcml2ZXJfaWSUaCeMImxhYmVsX2RyaXZlcl9yZXBvcnRlZF9zYXRpc2ZhY3Rpb26UjAp2YWxfdG9fYWRklIwMdmFsX3RvX2FkZF8ylHSUjANub3eUiIwDdXRjlIWUaCcojB1kcml2ZXJfaG91cmx5X3N0YXRzOmNvbnZfcmF0ZZSMHGRyaXZlcl9ob3VybHlfc3RhdHM6YWNjX3JhdGWUjCNkcml2ZXJfaG91cmx5X3N0YXRzOmF2Z19kYWlseV90cmlwc5SMKXRyYW5zZm9ybWVkX2NvbnZfcmF0ZTpjb252X3JhdGVfcGx1c192YWwxlIwpdHJhbnNmb3JtZWRfY29udl9yYXRlOmNvbnZfcmF0ZV9wbHVzX3ZhbDKUdJSMCWVudGl0eV9kZpSMCGZlYXR1cmVzlIaUdJQoaFiMCURhdGFGcmFtZZSMCWZyb21fZGljdJRoRmhNjBdnZXRfaGlzdG9yaWNhbF9mZWF0dXJlc5SMBXRvX2RmlGhRjARoZWFklHSUKGhijBFmb3JfYmF0Y2hfc2NvcmluZ5Rom4wLdHJhaW5pbmdfZGaUdJSMWi9ob21lL21hbnBtL0RldmVsb3BlcnMvTUxPcHMtbW9kdWxlLTMtNC9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vLi91dGlscy9mZWFzdF91dGlscy5weZRoVUsUQygGAwYDEAMQARABAv0GBgYCBgEE8wT/BBISAQQCAgEGAQT+BAkC9xAKlCkpdJRSlH2UKGhqjAV1dGlsc5Roa4wRdXRpbHMuZmVhc3RfdXRpbHOUaG2MWi9ob21lL21hbnBtL0RldmVsb3BlcnMvTUxPcHMtbW9kdWxlLTMtNC9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vLi91dGlscy9mZWFzdF91dGlscy5weZR1Tk5OdJRSlGhyaLF9lH2UKGhraFVodWhVaHZ9lChoYowTZmVhc3QuZmVhdHVyZV9zdG9yZZRoCpOUaKVoeIwEYm9vbJSTlHVoe05ofE5ofWiuaH5OaH9OaIBdlGiCfZQoaFhoAIwJc3ViaW1wb3J0lJOUaD+FlFKUaEZoRowIZGF0ZXRpbWWUk5R1dYaUhlIwdXWGlIZSMC4='))

      import argparse
      _parser = argparse.ArgumentParser(prog='Feature store', description='')
      _parser.add_argument("--url", dest="url", type=str, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = feature_store(**_parsed_args)
    args:
    - --url
    - {inputValue: url}
