name: Feature store
inputs:
- {name: url, type: String}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4'
      'wget==3.2' 'feast' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet --no-warn-script-location 'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22'
      'scikit-learn==1.3.2' 'SciPy==1.11.4' 'wget==3.2' 'feast' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      feature_store = pickle.loads(base64.b64decode(b'gASVUBEAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwFLAEsASxJLCktDQiwBAABkAWQAbAB9AWQBZABsAX0CZAFkAGwCfQNkAWQAbAN9BGQBZABsBH0FZAFkAmwEbQV9BgEAZAFkAGwGfQdkAWQAbAd9CGQBZABsCH0JZAFkA2wJbQp9CgEAdAuDAH0LdAxkBIMBAQB8B6ANZAVkBmcCoQEBAHoZfAugDnwLZAehAqAPoQB9DHQMZAh8DGoQmwCdAoMBAQB0DGQJfAygEaEAgwIBAFcAbhkEAHQSeWwBAH0NAQB6DXQMZAp8DZsAnQKDAQEAVwBZAGQAfQ1+DW4FZAB9DX4NdwF3AGQLfQ50DGQMgwEBAHwKgwB9D3wMfAxqEKATfA6hAaATZA2hARkAfRB8DGoUZABkAIUCfA5mAhkAfRF8D6AVfBB0FnwQgwEZAHwRoQIBAGQAUwCUKE5LAIwMRmVhdHVyZVN0b3JllIWUjBBMaW5lYXJSZWdyZXNzaW9ulIWUjBgKLS0tIFJ1biBmZWFzdCBhcHBseSAtLS2UjAVmZWFzdJSMBWFwcGx5lImMCWNvbHVtbnM6IJSMDXRyYWluaW5nX2RmOiCUjCtFcnJvciBXaGlsZSBjb252ZXJ0IGhpc3RvcmljYWwgZGF0YSB0byBkZjoglIwibGFiZWxfZHJpdmVyX3JlcG9ydGVkX3NhdGlzZmFjdGlvbpSMFwotLS0gVHJhaW5pbmcgbW9kZWwgLS0tlIwPZXZlbnRfdGltZXN0YW1wlHSUKIwCb3OUjANzeXOUjAZwYW5kYXOUjAZqb2JsaWKUaA5oCYwKc3VicHJvY2Vzc5SMBHdnZXSUjAR0aW1llIwUc2tsZWFybi5saW5lYXJfbW9kZWyUaAuMBUZFQVNUlIwFcHJpbnSUjANydW6UjCNmZXRjaF9oaXN0b3JpY2FsX2ZlYXR1cmVzX2VudGl0eV9kZpSMBXRvX2RmlIwHY29sdW1uc5SMBGhlYWSUjAlFeGNlcHRpb26UjARkcm9wlIwDbG9jlIwDZml0lIwGc29ydGVklHSUKIwDdXJslGgXaBiMAnBklGgaaA5oCWgbaBxoHWgLjAVzdG9yZZSMC3RyYWluaW5nX2RmlIwBZZSMBnRhcmdldJSMA3JlZ5SMB3RyYWluX1iUjAd0cmFpbl9ZlHSUjGsvaG9tZS9tYW5wbS9EZXZlbG9wZXJzL01MT3BzLW1vZHVsZS0zLTQvbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtLy4vY29tcG9uZW50cy9mZWF0dXJlX3N0b3JlL2NvbXBvbmVudC5weZSMDWZlYXR1cmVfc3RvcmWUSwxDNBABCAEIAQgBDAEIAQgBCAEMAQYCCAIOAQIDEAEQARIBDgEaAQiAAv8EBAgCBgEWARIBGAGUKSl0lFKUfZQojAtfX3BhY2thZ2VfX5ROjAhfX25hbWVfX5SMCF9fbWFpbl9flIwIX19maWxlX1+UaDZ1Tk5OdJRSlIwcY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGVfZmFzdJSMEl9mdW5jdGlvbl9zZXRzdGF0ZZSTlGhBfZR9lChoPWg3jAxfX3F1YWxuYW1lX1+UaDeMD19fYW5ub3RhdGlvbnNfX5R9lGgsjAhidWlsdGluc5SMA3N0cpSTlHOMDl9fa3dkZWZhdWx0c19flE6MDF9fZGVmYXVsdHNfX5ROjApfX21vZHVsZV9flGg+jAdfX2RvY19flE6MC19fY2xvc3VyZV9flE6MF19jbG91ZHBpY2tsZV9zdWJtb2R1bGVzlF2UjAtfX2dsb2JhbHNfX5R9lGgfaACMFF9tYWtlX3NrZWxldG9uX2NsYXNzlJOUKGhKjAR0eXBllJOUaB9oSowGb2JqZWN0lJOUhZR9lGhPjBF1dGlscy5mZWFzdF91dGlsc5RzjCBmZDQxOGJkZGU0NWM0MzFmYTE2OTU5NDI4YTg5ZjcyOJROdJRSlGhCjA9fY2xhc3Nfc2V0c3RhdGWUk5RoYX2UKGhPaF6MCF9faW5pdF9flGgCKGgHKEsBSwBLAEsNSwVLQ0IGAQAAZAF9AWQCfQJkA30DZAR9BGQFfQVkBn0GdABkAYMBagFkB2QHZAiNAgEAdAJqA3wCfAFkCY0CfQd0BGQKdAVqBqAHfAehAZsAnQKDAQEAdAJqA3wDfAFkCY0CfQh0BGQLdAVqBqAHfAihAZsAnQKDAQEAdAKgA3wEoQF9CXQEZAx0BWoGoAd8CaEBmwCdAoMBAQB0AmoDfAV8AWQJjQJ9CnQEZA10BWoGoAd8CqEBmwCdAoMBAQB0AqADZA6hAX0LdARkD3QFagagB3wLoQGbAJ0CgwEBAHQCoAN8BqEBfQx0BGQQdAVqBqAHfAyhAZsAnQKDAQEAdAhkEWQSjQF8AF8JZABTAJQoTowGLi9kYXRhlIxzaHR0cHM6Ly9naXRodWIuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L3Jhdy9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZGF0YS9yZWdpc3RyeS5kYpSMfGh0dHBzOi8vZ2l0aHViLmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9yYXcvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2RhdGEvZHJpdmVyX3N0YXRzLnBhcnF1ZXSUjIBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2ZlYXR1cmVfc3RvcmUueWFtbJSMd2h0dHBzOi8vZ2l0aHViLmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9yYXcvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2RhdGEvb25saW5lX3N0b3JlLmRilIx+aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L21haW4vbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwby90ZXN0X3dvcmtmbG93LnB5lIiMB3BhcmVudHOUjAhleGlzdF9va5SGlIwDb3V0lIWUjBVyZWdpc3RyeV9kYiBleGlzdGVkOiCUjB5kcml2ZXJfc3RhdHNfcGFycXVldCBleGlzdGVkOiCUjBxmZWF0dXJlX3N0b3JlLnlhbWwgZXhpc3RlZDoglIwTb25saW5lLmRiIGV4aXN0ZWQ6IJSMfWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZXhhbXBsZV9yZXBvLnB5lIweZXhhbXBsZV9mZWF0dXJlX3JlcG8gZXhpc3RlZDoglIwbdGVzdF9maWxsX2Zsb3cucHkgZXhpc3RlZDoglIwBLpSMCXJlcG9fcGF0aJSFlHSUKIwEUGF0aJSMBW1rZGlylGgcjAhkb3dubG9hZJRoIGgXjARwYXRolIwGZXhpc3RzlGgJaC50lCiMBHNlbGaUjAlkYXRhX3BhdGiUjA9yZWdpc3RyeV9kYl91cmyUjBhkcml2ZXJfc3RhdHNfcGFycXVldF91cmyUjBFmZWF0dXJlX3N0b3JlX3VybJSMDW9ubGluZV9kYl91cmyUjBJ0ZXN0X2ZpbGxfZmxvd191cmyUjAtyZWdpc3RyeV9kYpSMFGRyaXZlcl9zdGF0c19wYXJxdWV0lIwVZmVhdHVyZV9zdG9yZV9wYXJxdWV0lIwJb25saW5lX2RilIwUZXhhbXBsZV9mZWF0dXJlX3JlcG+UjBF0ZXN0X2ZpbGxfZmxvd19weZR0lIxaL2hvbWUvbWFucG0vRGV2ZWxvcGVycy9NTE9wcy1tb2R1bGUtMy00L21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS8uL3V0aWxzL2ZlYXN0X3V0aWxzLnB5lGhlSxZDLgQBBAMEAQQBBAEEARIBDgEWAQ4BFgEKARYBDgEWAQQBAgEE/xYDCgEWAQwDBAGUKSl0lFKUfZQoaDyMBXV0aWxzlGg9aF5oP4xaL2hvbWUvbWFucG0vRGV2ZWxvcGVycy9NTE9wcy1tb2R1bGUtMy00L21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS8uL3V0aWxzL2ZlYXN0X3V0aWxzLnB5lHVOTk50lFKUaERomX2UfZQoaD1oZWhHjA5GRUFTVC5fX2luaXRfX5RoSH2UjAZyZXR1cm6UTnNoTU5oTk5oT2heaFBOaFFOaFJdlGhUfZQoaH2MB3BhdGhsaWKUaH2TlGgcaACMCXN1YmltcG9ydJSTlGgchZRSlGgXaKRoF4WUUpRoCYwTZmVhc3QuZmVhdHVyZV9zdG9yZZRoCZOUdXWGlIZSMGgiaAIoaAcoSwJLAEsASwRLDEtDQ4Z0AGoBoAJnAGQBogF0A2QCZANkBGQFZAZkB4MGdANkAmQDZARkCGQEZAWDBnQDZAJkA2QEZAlkCmQLgwZnA2cAZAyiAWcAZA2iAWcAZA6iAWQPnAWhAX0CfAFyN3QAagRkEGQRZBKNAnwCZBM8AHwAagVqBnwCZwBkFKIBZBWNAn0DfANTAJQoTk3pA03qA03rA4eUTeUHSwRLDEsKSztLKksISxBLKEsaSwFLBUsDh5RLAUsCSwOHlEsKSxRLHoeUKIwJZHJpdmVyX2lklGgVaBOMCnZhbF90b19hZGSUjAx2YWxfdG9fYWRkXzKUdJSMA25vd5SIjAN1dGOUhZRoFSiMHWRyaXZlcl9ob3VybHlfc3RhdHM6Y29udl9yYXRllIwcZHJpdmVyX2hvdXJseV9zdGF0czphY2NfcmF0ZZSMI2RyaXZlcl9ob3VybHlfc3RhdHM6YXZnX2RhaWx5X3RyaXBzlIwpdHJhbnNmb3JtZWRfY29udl9yYXRlOmNvbnZfcmF0ZV9wbHVzX3ZhbDGUjCl0cmFuc2Zvcm1lZF9jb252X3JhdGU6Y29udl9yYXRlX3BsdXNfdmFsMpR0lIwJZW50aXR5X2RmlIwIZmVhdHVyZXOUhpR0lChoLYwJRGF0YUZyYW1llIwJZnJvbV9kaWN0lIwIZGF0ZXRpbWWUjAt0b19kYXRldGltZZRoLowXZ2V0X2hpc3RvcmljYWxfZmVhdHVyZXOUdJQoaIOMEWZvcl9iYXRjaF9zY29yaW5nlGi+aC90lGiRaCJLM0MkBgMGAxADEAEQAQL9BgYGAgYBBPME/wQSEgEGAgIBBgEG/gQKlCkpdJRSlGiVTk5OdJRSlGhEaM59lH2UKGg9aCJoR4wpRkVBU1QuZmV0Y2hfaGlzdG9yaWNhbF9mZWF0dXJlc19lbnRpdHlfZGaUaEh9lGjIaEqMBGJvb2yUk5RzaE1OaE5OaE9oXmhQTmhRTmhSXZRoVH2UKGgtaKRoGYWUUpRoxGjEjAhkYXRldGltZZSTlHV1hpSGUjBoUE51fZSGlIZSMHN1hpSGUjAu'))

      import argparse
      _parser = argparse.ArgumentParser(prog='Feature store', description='')
      _parser.add_argument("--url", dest="url", type=str, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = feature_store(**_parsed_args)
    args:
    - --url
    - {inputValue: url}
