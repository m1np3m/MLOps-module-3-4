name: Data processing
inputs:
- {name: training_df, type: PKL}
outputs:
- {name: train_X, type: PKL}
- {name: train_Y, type: PKL}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4'
      'wget==3.2' 'feast' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet --no-warn-script-location 'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22'
      'scikit-learn==1.3.2' 'SciPy==1.11.4' 'wget==3.2' 'feast' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      data_processing = pickle.loads(base64.b64decode(b'gASVfgQAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwNLAEsASwxLBEtDQ6JkAWQAbAB9A2QBZABsAX0EZAFkAGwCfQVkAWQAbAN9BmQBZAJsBG0FfQcBAHwDoAZkA6EBfQh0B2QEfAibAJ0CgwEBAHwGoAh8AKEBfQBkBX0JfAB8AGoJoAp8CaEBoApkBqEBGQB9CnwKdAt8CoMBGQB9CnwAagxkAGQAhQJ8CWYCGQB9C3wGoA18CnwBoQIBAHwGoA18C3wCoQIBAGQAUwCUKE5LAIwQTGluZWFyUmVncmVzc2lvbpSFlIwLRU5WSVJPTk1FTlSUjAtSdW5uaW5nIG9uIJSMImxhYmVsX2RyaXZlcl9yZXBvcnRlZF9zYXRpc2ZhY3Rpb26UjA9ldmVudF90aW1lc3RhbXCUdJQojAJvc5SMA3N5c5SMBnBhbmRhc5SMBmpvYmxpYpSMFHNrbGVhcm4ubGluZWFyX21vZGVslGgJjAZnZXRlbnaUjAVwcmludJSMBGxvYWSUjAdjb2x1bW5zlIwEZHJvcJSMBnNvcnRlZJSMA2xvY5SMBGR1bXCUdJQojAt0cmFpbmluZ19kZpSMDHRyYWluX1hfcGF0aJSMDHRyYWluX1lfcGF0aJRoEGgRjAJwZJRoE2gJaAuMBnRhcmdldJSMB3RyYWluX1iUjAd0cmFpbl9ZlHSUjHAvaG9tZS9tYW5wbS9EZXZlbG9wZXJzL01MT3BzLW1vZHVsZS0zLTQvbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtLy4vY29tcG9uZW50cy9kYXRhX3ByZXByb2Nlc3NpbmcvY29tcG9uZW50LnB5lIwPZGF0YV9wcm9jZXNzaW5nlEsMQxoQBQgBCAEMAQoCDgEKAwQCFgIMARIBDAIQAZQpKXSUUpR9lCiMC19fcGFja2FnZV9flE6MCF9fbmFtZV9flIwIX19tYWluX1+UjAhfX2ZpbGVfX5RoJnVOTk50lFKUjBxjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZV9mYXN0lIwSX2Z1bmN0aW9uX3NldHN0YXRllJOUaDF9lH2UKGgtaCeMDF9fcXVhbG5hbWVfX5RoJ4wPX19hbm5vdGF0aW9uc19flH2UKGgejBlrZnAuY29tcG9uZW50cy5fcHl0aG9uX29wlIwJSW5wdXRQYXRolJOUKYGUfZSMBHR5cGWUjANQS0yUc2JoH2g6jApPdXRwdXRQYXRolJOUKYGUfZRoP2hAc2JoIGhCKYGUfZRoP2hAc2J1jA5fX2t3ZGVmYXVsdHNfX5ROjAxfX2RlZmF1bHRzX1+UTowKX19tb2R1bGVfX5RoLowHX19kb2NfX5ROjAtfX2Nsb3N1cmVfX5ROjBdfY2xvdWRwaWNrbGVfc3VibW9kdWxlc5RdlIwLX19nbG9iYWxzX1+UfZR1hpSGUjAu'))

      import argparse
      _parser = argparse.ArgumentParser(prog='Data processing', description='')
      _parser.add_argument("--training-df", dest="training_df", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--train-X", dest="train_X_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--train-Y", dest="train_Y_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = data_processing(**_parsed_args)
    args:
    - --training-df
    - {inputPath: training_df}
    - --train-X
    - {outputPath: train_X}
    - --train-Y
    - {outputPath: train_Y}
