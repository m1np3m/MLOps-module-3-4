name: Model training
inputs:
- {name: train_X, type: PKL}
- {name: train_Y, type: PKL}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4'
      || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      model_training = pickle.loads(base64.b64decode(b'gASVJgQAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwJLAEsASwpLBEtDQ4pkAWQAbAB9AmQBZABsAX0DZAFkAGwCfQRkAWQAbAN9BWQBZAJsBG0FfQYBAGQBZANsBm0HfQcBAHwCoAhkBKEBfQh0CWQFfAibAJ0CgwEBAHwFoAp8AKEBfQB8BaAKfAGhAX0BdAlkBoMBAQB8B4MAfQl8CaALfAB8AaECAQB0CWQHgwEBAGQAUwCUKE5LAIwPVGZpZGZWZWN0b3JpemVylIWUjBBMaW5lYXJSZWdyZXNzaW9ulIWUjAtFTlZJUk9OTUVOVJSMC1J1bm5pbmcgb24glIwXCi0tLSBUcmFpbmluZyBtb2RlbCAtLS2UjBNEb25lIHRyYWluaW5nIG1vZGVslHSUKIwCb3OUjANzeXOUjAZwYW5kYXOUjAZqb2JsaWKUjB9za2xlYXJuLmZlYXR1cmVfZXh0cmFjdGlvbi50ZXh0lGgJjBRza2xlYXJuLmxpbmVhcl9tb2RlbJRoC4wGZ2V0ZW52lIwFcHJpbnSUjARsb2FklIwDZml0lHSUKIwHdHJhaW5fWJSMB3RyYWluX1mUaBJoE4wCcGSUaBVoCWgLaA2MA3JlZ5R0lIxsL2hvbWUvbWFucG0vRGV2ZWxvcGVycy9NTE9wcy1tb2R1bGUtMy00L21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS8uL2NvbXBvbmVudHMvbW9kZWxfdHJhaW5pbmcvY29tcG9uZW50LnB5lIwObW9kZWxfdHJhaW5pbmeUSwtDGhAECAEIAQwBDAEKAg4BCgIKAQgCBgEMAQwClCkpdJRSlH2UKIwLX19wYWNrYWdlX1+UTowIX19uYW1lX1+UjAhfX21haW5fX5SMCF9fZmlsZV9flGgidU5OTnSUUpSMHGNsb3VkcGlja2xlLmNsb3VkcGlja2xlX2Zhc3SUjBJfZnVuY3Rpb25fc2V0c3RhdGWUk5RoLX2UfZQoaCloI4wMX19xdWFsbmFtZV9flGgjjA9fX2Fubm90YXRpb25zX1+UfZQoaB2MGWtmcC5jb21wb25lbnRzLl9weXRob25fb3CUjAlJbnB1dFBhdGiUk5QpgZR9lIwEdHlwZZSMA1BLTJRzYmgeaDgpgZR9lGg7aDxzYnWMDl9fa3dkZWZhdWx0c19flE6MDF9fZGVmYXVsdHNfX5ROjApfX21vZHVsZV9flGgqjAdfX2RvY19flE6MC19fY2xvc3VyZV9flE6MF19jbG91ZHBpY2tsZV9zdWJtb2R1bGVzlF2UjAtfX2dsb2JhbHNfX5R9lHWGlIZSMC4='))

      import argparse
      _parser = argparse.ArgumentParser(prog='Model training', description='')
      _parser.add_argument("--train-X", dest="train_X", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--train-Y", dest="train_Y", type=str, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = model_training(**_parsed_args)
    args:
    - --train-X
    - {inputPath: train_X}
    - --train-Y
    - {inputPath: train_Y}
