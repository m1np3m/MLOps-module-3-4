name: Data downloading
outputs:
- {name: training_df, type: PKL}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4'
      'wget==3.2' 'feast' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet --no-warn-script-location 'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22'
      'scikit-learn==1.3.2' 'SciPy==1.11.4' 'wget==3.2' 'feast' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      data_downloading = pickle.loads(base64.b64decode(b'gASVvBAAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwFLAEsASw1LCktDQ8xkAWQAbAB9AWQBZABsAX0CZAFkAGwCfQNkAWQAbAN9BGQBZAJsBG0FfQUBAGQBZABsBn0GZAFkAGwHfQdkAWQAbAh9CGQBZANsCW0KfQkBAHQLgwB9CnogfApqDGQEZAWNAaANoQB9C3QOZAZ8C2oPmwCdAoMBAQB0DmQHfAugEKEAgwIBAHwEoBF8C3wAoQIBAFcAZABTAAQAdBJ5ZQEAfQwBAHoOdA5kCHwMmwCdAoMBAQBXAFkAZAB9DH4MZABTAGQAfQx+DHcBdwCUKE5LAIwMRmVhdHVyZVN0b3JllIWUjBBMaW5lYXJSZWdyZXNzaW9ulIWUiYwRZm9yX2JhdGNoX3Njb3JpbmeUhZSMCWNvbHVtbnM6IJSMDXRyYWluaW5nX2RmOiCUjCtFcnJvciBXaGlsZSBjb252ZXJ0IGhpc3RvcmljYWwgZGF0YSB0byBkZjoglHSUKIwCb3OUjANzeXOUjAZwYW5kYXOUjAZqb2JsaWKUjAVmZWFzdJRoCYwKc3VicHJvY2Vzc5SMBHdnZXSUjAR0aW1llIwUc2tsZWFybi5saW5lYXJfbW9kZWyUaAuMBUZFQVNUlIwjZmV0Y2hfaGlzdG9yaWNhbF9mZWF0dXJlc19lbnRpdHlfZGaUjAV0b19kZpSMBXByaW50lIwHY29sdW1uc5SMBGhlYWSUjARkdW1wlIwJRXhjZXB0aW9ulHSUKIwQdHJhaW5pbmdfZGZfcGF0aJRoE2gUjAJwZJRoFmgJaBhoGWgaaAuMDWZlYXR1cmVfc3RvcmWUjAt0cmFpbmluZ19kZpSMAWWUdJSMbi9ob21lL21hbnBtL0RldmVsb3BlcnMvTUxPcHMtbW9kdWxlLTMtNC9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vLi9jb21wb25lbnRzL2RhdGFfZG93bmxvYWRpbmcvY29tcG9uZW50LnB5lIwQZGF0YV9kb3dubG9hZGluZ5RLDEMsEAEIAQgBDAEIAQgBCAEMAQYCAgMEAQIBBP8EAgL+EAMOARIBDgEcAQiAAv+UKSl0lFKUfZQojAtfX3BhY2thZ2VfX5ROjAhfX25hbWVfX5SMCF9fbWFpbl9flIwIX19maWxlX1+UaCt1Tk5OdJRSlIwcY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGVfZmFzdJSMEl9mdW5jdGlvbl9zZXRzdGF0ZZSTlGg2fZR9lChoMmgsjAxfX3F1YWxuYW1lX1+UaCyMD19fYW5ub3RhdGlvbnNfX5R9lGgljBlrZnAuY29tcG9uZW50cy5fcHl0aG9uX29wlIwKT3V0cHV0UGF0aJSTlCmBlH2UjAR0eXBllIwDUEtMlHNic4wOX19rd2RlZmF1bHRzX1+UTowMX19kZWZhdWx0c19flE6MCl9fbW9kdWxlX1+UaDOMB19fZG9jX1+UTowLX19jbG9zdXJlX1+UTowXX2Nsb3VkcGlja2xlX3N1Ym1vZHVsZXOUXZSMC19fZ2xvYmFsc19flH2UaBxoAIwUX21ha2Vfc2tlbGV0b25fY2xhc3OUk5QojAhidWlsdGluc5SMBHR5cGWUk5RoHGhRjAZvYmplY3SUk5SFlH2UaEiMEXV0aWxzLmZlYXN0X3V0aWxzlHOMIGZiYWU1NjZjNTI3NjQwMGRiYTc2YjQxZTk2ZDcyODJmlE50lFKUaDeMD19jbGFzc19zZXRzdGF0ZZSTlGhbfZQoaEhoWIwIX19pbml0X1+UaAIoaAcoSwFLAEsASw1LBUtDQgYBAABkAX0BZAJ9AmQDfQNkBH0EZAV9BWQGfQZ0AGQBgwFqAWQHZAdkCI0CAQB0AmoDfAJ8AWQJjQJ9B3QEZAp0BWoGoAd8B6EBmwCdAoMBAQB0AmoDfAN8AWQJjQJ9CHQEZAt0BWoGoAd8CKEBmwCdAoMBAQB0AqADfAShAX0JdARkDHQFagagB3wJoQGbAJ0CgwEBAHQCagN8BXwBZAmNAn0KdARkDXQFagagB3wKoQGbAJ0CgwEBAHQCoANkDqEBfQt0BGQPdAVqBqAHfAuhAZsAnQKDAQEAdAKgA3wGoQF9DHQEZBB0BWoGoAd8DKEBmwCdAoMBAQB0CGQRZBKNAXwAXwlkAFMAlChOjAYuL2RhdGGUjHNodHRwczovL2dpdGh1Yi5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvcmF3L21haW4vbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwby9kYXRhL3JlZ2lzdHJ5LmRilIx8aHR0cHM6Ly9naXRodWIuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L3Jhdy9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZGF0YS9kcml2ZXJfc3RhdHMucGFycXVldJSMgGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZmVhdHVyZV9zdG9yZS55YW1slIx3aHR0cHM6Ly9naXRodWIuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L3Jhdy9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vZGF0YS9vbmxpbmVfc3RvcmUuZGKUjH5odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL3Rlc3Rfd29ya2Zsb3cucHmUiIwHcGFyZW50c5SMCGV4aXN0X29rlIaUjANvdXSUhZSMFXJlZ2lzdHJ5X2RiIGV4aXN0ZWQ6IJSMHmRyaXZlcl9zdGF0c19wYXJxdWV0IGV4aXN0ZWQ6IJSMHGZlYXR1cmVfc3RvcmUueWFtbCBleGlzdGVkOiCUjBNvbmxpbmUuZGIgZXhpc3RlZDoglIx9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L21haW4vbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwby9leGFtcGxlX3JlcG8ucHmUjB5leGFtcGxlX2ZlYXR1cmVfcmVwbyBleGlzdGVkOiCUjBt0ZXN0X2ZpbGxfZmxvdy5weSBleGlzdGVkOiCUjAEulIwJcmVwb19wYXRolIWUdJQojARQYXRolIwFbWtkaXKUaBmMCGRvd25sb2FklGgfaBOMBHBhdGiUjAZleGlzdHOUaAmMBXN0b3JllHSUKIwEc2VsZpSMCWRhdGFfcGF0aJSMD3JlZ2lzdHJ5X2RiX3VybJSMGGRyaXZlcl9zdGF0c19wYXJxdWV0X3VybJSMEWZlYXR1cmVfc3RvcmVfdXJslIwNb25saW5lX2RiX3VybJSMEnRlc3RfZmlsbF9mbG93X3VybJSMC3JlZ2lzdHJ5X2RilIwUZHJpdmVyX3N0YXRzX3BhcnF1ZXSUjBVmZWF0dXJlX3N0b3JlX3BhcnF1ZXSUjAlvbmxpbmVfZGKUjBRleGFtcGxlX2ZlYXR1cmVfcmVwb5SMEXRlc3RfZmlsbF9mbG93X3B5lHSUjFovaG9tZS9tYW5wbS9EZXZlbG9wZXJzL01MT3BzLW1vZHVsZS0zLTQvbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtLy4vdXRpbHMvZmVhc3RfdXRpbHMucHmUaF9LFkMuBAEEAwQBBAEEAQQBEgEOARYBDgEWAQoBFgEOARYBBAECAQT/FgMKARYBDAMEAZQpKXSUUpR9lChoMYwFdXRpbHOUaDJoWGg0jFovaG9tZS9tYW5wbS9EZXZlbG9wZXJzL01MT3BzLW1vZHVsZS0zLTQvbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtLy4vdXRpbHMvZmVhc3RfdXRpbHMucHmUdU5OTnSUUpRoOWiUfZR9lChoMmhfaDyMDkZFQVNULl9faW5pdF9flGg9fZSMBnJldHVybpROc2hGTmhHTmhIaFhoSU5oSk5oS12UaE19lChod4wHcGF0aGxpYpRod5OUaBloAIwJc3ViaW1wb3J0lJOUaBmFlFKUaBNon2gThZRSlGgJjBNmZWFzdC5mZWF0dXJlX3N0b3JllGgJk5R1dYaUhlIwaB1oAihoByhLAksASwBLBEsMS0NDhnQAagGgAmcAZAGiAXQDZAJkA2QEZAVkBmQHgwZ0A2QCZANkBGQIZARkBYMGdANkAmQDZARkCWQKZAuDBmcDZwBkDKIBZwBkDaIBZwBkDqIBZA+cBaEBfQJ8AXI3dABqBGQQZBFkEo0CfAJkEzwAfABqBWoGfAJnAGQUogFkFY0CfQN8A1MAlChOTekDTeoDTesDh5RN5QdLBEsMSwpLO0sqSwhLEEsoSxpLAUsFSwOHlEsBSwJLA4eUSwpLFEseh5QojAlkcml2ZXJfaWSUjA9ldmVudF90aW1lc3RhbXCUjCJsYWJlbF9kcml2ZXJfcmVwb3J0ZWRfc2F0aXNmYWN0aW9ulIwKdmFsX3RvX2FkZJSMDHZhbF90b19hZGRfMpR0lIwDbm93lIiMA3V0Y5SFlGitKIwdZHJpdmVyX2hvdXJseV9zdGF0czpjb252X3JhdGWUjBxkcml2ZXJfaG91cmx5X3N0YXRzOmFjY19yYXRllIwjZHJpdmVyX2hvdXJseV9zdGF0czphdmdfZGFpbHlfdHJpcHOUjCl0cmFuc2Zvcm1lZF9jb252X3JhdGU6Y29udl9yYXRlX3BsdXNfdmFsMZSMKXRyYW5zZm9ybWVkX2NvbnZfcmF0ZTpjb252X3JhdGVfcGx1c192YWwylHSUjAllbnRpdHlfZGaUjAhmZWF0dXJlc5SGlHSUKGgmjAlEYXRhRnJhbWWUjAlmcm9tX2RpY3SUjAhkYXRldGltZZSMC3RvX2RhdGV0aW1llGh8jBdnZXRfaGlzdG9yaWNhbF9mZWF0dXJlc5R0lChofmgNaLtoKHSUaIxoHUszQyQGAwYDEAMQARABAv0GBgYCBgEE8wT/BBISAQYCAgEGAQb+BAqUKSl0lFKUaJBOTk50lFKUaDloyn2UfZQoaDJoHWg8jClGRUFTVC5mZXRjaF9oaXN0b3JpY2FsX2ZlYXR1cmVzX2VudGl0eV9kZpRoPX2UaA1oUYwEYm9vbJSTlHNoRk5oR05oSGhYaElOaEpOaEtdlGhNfZQoaCZon2gVhZRSlGjBaMGMCGRhdGV0aW1llJOUdXWGlIZSMGhJTnV9lIaUhlIwc3WGlIZSMC4='))

      import argparse
      _parser = argparse.ArgumentParser(prog='Data downloading', description='')
      _parser.add_argument("--training-df", dest="training_df_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = data_downloading(**_parsed_args)
    args:
    - --training-df
    - {outputPath: training_df}
