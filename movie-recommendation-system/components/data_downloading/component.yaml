name: Data downloading
outputs:
- {name: training_df, type: PKL}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4'
      'wget==3.2' 'feast' 'psycopg2' 'GitPython' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'joblib' 'cloudpickle'
      'pandas' 'kfp==1.8.22' 'scikit-learn==1.3.2' 'SciPy==1.11.4' 'wget==3.2' 'feast'
      'psycopg2' 'GitPython' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      data_downloading = pickle.loads(base64.b64decode(b'gASVbBAAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwFLAEsASw1LCktDQ8hkAWQAbAB9AWQBZABsAX0CZAFkAGwCfQNkAWQAbAN9BGQBZAJsBG0FfQUBAGQBZABsBn0GZAFkAGwHfQdkAWQAbAh9CGQBZANsCW0KfQkBAHQLgwB9CnoefApqDGQEZAWNAaANoQB9C3QOZAZ8C2oPmwCdAoMBAQB0DmQHfAugEKEAgwIBAAkAfAigEWQJoQEBAHFEBAB0E3ljAQB9DAEAeg50DmQKfAybAJ0CgwEBAFcAWQBkAH0MfgxkAFMAZAB9DH4MdwF3AJQoTksAjAxGZWF0dXJlU3RvcmWUhZSMEExpbmVhclJlZ3Jlc3Npb26UhZSJjBFmb3JfYmF0Y2hfc2NvcmluZ5SFlIwJY29sdW1uczoglIwNdHJhaW5pbmdfZGY6IJSISwGMK0Vycm9yIFdoaWxlIGNvbnZlcnQgaGlzdG9yaWNhbCBkYXRhIHRvIGRmOiCUdJQojAJvc5SMA3N5c5SMBnBhbmRhc5SMBmpvYmxpYpSMBWZlYXN0lGgJjApzdWJwcm9jZXNzlIwEd2dldJSMBHRpbWWUjBRza2xlYXJuLmxpbmVhcl9tb2RlbJRoC4wFRkVBU1SUjCNmZXRjaF9oaXN0b3JpY2FsX2ZlYXR1cmVzX2VudGl0eV9kZpSMBXRvX2RmlIwFcHJpbnSUjAdjb2x1bW5zlIwEaGVhZJSMBXNsZWVwlIwEZHVtcJSMCUV4Y2VwdGlvbpR0lCiMEHRyYWluaW5nX2RmX3BhdGiUaBNoFIwCcGSUaBZoCWgYaBloGmgLjA1mZWF0dXJlX3N0b3JllIwLdHJhaW5pbmdfZGaUjAFllHSUjG4vaG9tZS9tYW5wbS9EZXZlbG9wZXJzL01MT3BzLW1vZHVsZS0zLTQvbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtLy4vY29tcG9uZW50cy9kYXRhX2Rvd25sb2FkaW5nL2NvbXBvbmVudC5weZSMEGRhdGFfZG93bmxvYWRpbmeUSw1DMBABCAEIAQwBCAEIAQgBDAEGCQICBAECAQT/BAIC/hADDgECAQoBAv8OAxwBCIAC/5QpKXSUUpR9lCiMC19fcGFja2FnZV9flE6MCF9fbmFtZV9flIwIX19tYWluX1+UjAhfX2ZpbGVfX5RoLHVOTk50lFKUjBxjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZV9mYXN0lIwSX2Z1bmN0aW9uX3NldHN0YXRllJOUaDd9lH2UKGgzaC2MDF9fcXVhbG5hbWVfX5RoLYwPX19hbm5vdGF0aW9uc19flH2UaCaMGWtmcC5jb21wb25lbnRzLl9weXRob25fb3CUjApPdXRwdXRQYXRolJOUKYGUfZSMBHR5cGWUjANQS0yUc2JzjA5fX2t3ZGVmYXVsdHNfX5ROjAxfX2RlZmF1bHRzX1+UTowKX19tb2R1bGVfX5RoNIwHX19kb2NfX5ROjAtfX2Nsb3N1cmVfX5ROjBdfY2xvdWRwaWNrbGVfc3VibW9kdWxlc5RdlIwLX19nbG9iYWxzX1+UfZRoHGgAjBRfbWFrZV9za2VsZXRvbl9jbGFzc5STlCiMCGJ1aWx0aW5zlIwEdHlwZZSTlGgcaFKMBm9iamVjdJSTlIWUfZRoSYwRdXRpbHMuZmVhc3RfdXRpbHOUc4wgMDAwZWYxNDk1NWQxNDJjZmJjNDBiZWQxNDY5MWZhMDOUTnSUUpRoOIwPX2NsYXNzX3NldHN0YXRllJOUaFx9lChoSWhZjAhfX2luaXRfX5RoAihoByhLAUsASwBLDUsFS0NCBgEAAGQBfQFkAn0CZAN9A2QEfQRkBX0FZAZ9BnQAZAGDAWoBZAdkB2QIjQIBAHQCagN8AnwBZAmNAn0HdARkCnQFagagB3wHoQGbAJ0CgwEBAHQCagN8A3wBZAmNAn0IdARkC3QFagagB3wIoQGbAJ0CgwEBAHQCoAN8BKEBfQl0BGQMdAVqBqAHfAmhAZsAnQKDAQEAdAJqA3wFfAFkCY0CfQp0BGQNdAVqBqAHfAqhAZsAnQKDAQEAdAKgA2QOoQF9C3QEZA90BWoGoAd8C6EBmwCdAoMBAQB0AqADfAahAX0MdARkEHQFagagB3wMoQGbAJ0CgwEBAHQIZBFkEo0BfABfCWQAUwCUKE6MBi4vZGF0YZSMc2h0dHBzOi8vZ2l0aHViLmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9yYXcvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2RhdGEvcmVnaXN0cnkuZGKUjHxodHRwczovL2dpdGh1Yi5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvcmF3L21haW4vbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwby9kYXRhL2RyaXZlcl9zdGF0cy5wYXJxdWV0lIyAaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL20xbnAzbS9NTE9wcy1tb2R1bGUtMy00L21haW4vbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwby9mZWF0dXJlX3N0b3JlLnlhbWyUjHdodHRwczovL2dpdGh1Yi5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvcmF3L21haW4vbW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwby9kYXRhL29ubGluZV9zdG9yZS5kYpSMfmh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tMW5wM20vTUxPcHMtbW9kdWxlLTMtNC9tYWluL21vdmllLXJlY29tbWVuZGF0aW9uLXN5c3RlbS9mZWFzdC9mZWF0dXJlX3JlcG8vdGVzdF93b3JrZmxvdy5weZSIjAdwYXJlbnRzlIwIZXhpc3Rfb2uUhpSMA291dJSFlIwVcmVnaXN0cnlfZGIgZXhpc3RlZDoglIweZHJpdmVyX3N0YXRzX3BhcnF1ZXQgZXhpc3RlZDoglIwcZmVhdHVyZV9zdG9yZS55YW1sIGV4aXN0ZWQ6IJSME29ubGluZS5kYiBleGlzdGVkOiCUjH1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbTFucDNtL01MT3BzLW1vZHVsZS0zLTQvbWFpbi9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vZmVhc3QvZmVhdHVyZV9yZXBvL2V4YW1wbGVfcmVwby5weZSMHmV4YW1wbGVfZmVhdHVyZV9yZXBvIGV4aXN0ZWQ6IJSMG3Rlc3RfZmlsbF9mbG93LnB5IGV4aXN0ZWQ6IJSMAS6UjAlyZXBvX3BhdGiUhZR0lCiMBFBhdGiUjAVta2RpcpRoGYwIZG93bmxvYWSUaB9oE4wEcGF0aJSMBmV4aXN0c5RoCYwFc3RvcmWUdJQojARzZWxmlIwJZGF0YV9wYXRolIwPcmVnaXN0cnlfZGJfdXJslIwYZHJpdmVyX3N0YXRzX3BhcnF1ZXRfdXJslIwRZmVhdHVyZV9zdG9yZV91cmyUjA1vbmxpbmVfZGJfdXJslIwSdGVzdF9maWxsX2Zsb3dfdXJslIwLcmVnaXN0cnlfZGKUjBRkcml2ZXJfc3RhdHNfcGFycXVldJSMFWZlYXR1cmVfc3RvcmVfcGFycXVldJSMCW9ubGluZV9kYpSMFGV4YW1wbGVfZmVhdHVyZV9yZXBvlIwRdGVzdF9maWxsX2Zsb3dfcHmUdJSMWi9ob21lL21hbnBtL0RldmVsb3BlcnMvTUxPcHMtbW9kdWxlLTMtNC9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vLi91dGlscy9mZWFzdF91dGlscy5weZRoYEsLQy4EAgQDBAEEAQQBBAESAQ4BFgEOARYBCgEWAQ4BFgEEAQIBBP8WAwoBFgEMAgQBlCkpdJRSlH2UKGgyjAV1dGlsc5RoM2hZaDVojXVOTk50lFKUaDpolH2UfZQoaDNoYGg9jA5GRUFTVC5fX2luaXRfX5RoPn2UjAZyZXR1cm6UTnNoR05oSE5oSWhZaEpOaEtOaExdlGhOfZQoaHiMB3BhdGhsaWKUaHiTlGgZaACMCXN1YmltcG9ydJSTlGgZhZRSlGgTaJ9oE4WUUpRoCYwTZmVhc3QuZmVhdHVyZV9zdG9yZZRoCZOUdXWGlIZSMGgdaAIoaAcoSwJLAEsASwRLDEtDQ4Z0AGoBoAJnAGQBogF0A2QCZANkBGQFZAZkB4MGdANkAmQDZARkCGQEZAWDBnQDZAJkA2QEZAlkCmQLgwZnA2cAZAyiAWcAZA2iAWcAZA6iAWQPnAWhAX0CfAFyN3QAagRkEGQRZBKNAnwCZBM8AHwAagVqBnwCZwBkFKIBZBWNAn0DfANTAJQoTk3pA03qA03rA4eUTeUHSwRLDEsKSztLKksISxBLKEsaSwFLBUsDh5RLAUsCSwOHlEsKSxRLHoeUKIwJZHJpdmVyX2lklIwPZXZlbnRfdGltZXN0YW1wlIwibGFiZWxfZHJpdmVyX3JlcG9ydGVkX3NhdGlzZmFjdGlvbpSMCnZhbF90b19hZGSUjAx2YWxfdG9fYWRkXzKUdJSMA25vd5SIjAN1dGOUhZRorSiMHWRyaXZlcl9ob3VybHlfc3RhdHM6Y29udl9yYXRllIwcZHJpdmVyX2hvdXJseV9zdGF0czphY2NfcmF0ZZSMI2RyaXZlcl9ob3VybHlfc3RhdHM6YXZnX2RhaWx5X3RyaXBzlIwpdHJhbnNmb3JtZWRfY29udl9yYXRlOmNvbnZfcmF0ZV9wbHVzX3ZhbDGUjCl0cmFuc2Zvcm1lZF9jb252X3JhdGU6Y29udl9yYXRlX3BsdXNfdmFsMpR0lIwJZW50aXR5X2RmlIwIZmVhdHVyZXOUhpR0lChoJ4wJRGF0YUZyYW1llIwJZnJvbV9kaWN0lIwIZGF0ZXRpbWWUjAt0b19kYXRldGltZZRofYwXZ2V0X2hpc3RvcmljYWxfZmVhdHVyZXOUdJQoaH9oDWi7aCl0lGiNaB1LKEMkBgMGAxADEAEQAQL9BgYGAgYBBPME/wQSEgEGAgIBBgEG/gQKlCkpdJRSlGiRTk5OdJRSlGg6aMp9lH2UKGgzaB1oPYwpRkVBU1QuZmV0Y2hfaGlzdG9yaWNhbF9mZWF0dXJlc19lbnRpdHlfZGaUaD59lGgNaFKMBGJvb2yUk5RzaEdOaEhOaEloWWhKTmhLTmhMXZRoTn2UKGgnaJ9oFYWUUpRowWjBjAhkYXRldGltZZSTlHV1hpSGUjBoSk51fZSGlIZSMHN1hpSGUjAu'))

      import argparse
      _parser = argparse.ArgumentParser(prog='Data downloading', description='')
      _parser.add_argument("--training-df", dest="training_df_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = data_downloading(**_parsed_args)
    args:
    - --training-df
    - {outputPath: training_df}
