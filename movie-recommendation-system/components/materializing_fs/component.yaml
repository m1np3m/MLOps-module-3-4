name: Materialize feature store
implementation:
  container:
    image: manpham1999/kubeflow-feast:latest
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'joblib' 'cloudpickle' 'kfp==1.8.22' 'feast[postgres]' 'feast[redis]' 'GitPython'
      'psycopg2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'joblib' 'cloudpickle' 'kfp==1.8.22' 'feast[postgres]'
      'feast[redis]' 'GitPython' 'psycopg2' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      import sys
      try:
          import cloudpickle as _cloudpickle
      except ImportError:
          import subprocess
          try:
              print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle globally", file=sys.stderr)
          except:
              print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
              subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
              print("Installed cloudpickle for the current user", file=sys.stderr)
              # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
              import site
              sys.path.append(site.getusersitepackages())
          import cloudpickle as _cloudpickle
          print("cloudpickle loaded successfully after installing.", file=sys.stderr)

      pickler_python_version = (3, 10, 13, 'final', 0)
      current_python_version = tuple(sys.version_info)
      if (
          current_python_version[0] != pickler_python_version[0] or
          current_python_version[1] < pickler_python_version[1] or
          current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
          ):
          raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

      if current_python_version != pickler_python_version:
          print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

      import base64
      import pickle

      materialize_feature_store = pickle.loads(base64.b64decode(b'gASVYhAAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwBLAEsASxFLCktDQnYBAABkAWQAbAB9AGQBZABsAX0BZAFkAGwCfQJkAWQAbAN9A2QBZABsBH0EZAFkAGwEfQRkAWQCbAVtBX0FAQBkAWQAbAZ9BnQHgwB9B2QDfQhkBH0JZAV9Cnp4fAWgCKEAfQt8C6AJfAqhAX0LfAegCnwIfAmhAn0MfAxyRnQLZAZ8CZsAZAedA4MBAQBuBXwBoAxkCKEBAQB0C2QJgwEBAHwAoA18CWQKFwChAQEAfASgDmQLoQEBAHwEoA5kDGQNfAtnA6EBAQB8B6APoQB9DWcAfQ58DUQAXQ19D3wOoBB8D2oRoQEBAHQLfA9qEYMBAQBxa3QLZA6DAQEAfAegEnwOoQEBAHwEoA5kD2QQZwKhAQEAdAtkEYMBAQB8B6ATZBKhAQEAdAtkE4MBAQB8BKAOZwBkFKIBoQEBAHQLZBWDAQEAVwBkAFMABAB0FHm6AQB9EAEAegt0C3wQgwEBAFcAWQBkAH0QfhBkAFMAZAB9EH4QdwF3AJQoTksAjAhkYXRldGltZZSFlIwqZ2l0QGdpdGh1Yi5jb206bTFucDNtL01MT3BzLW1vZHVsZS0zLTQuZ2l0lIwOZmVhdHVyZV9zdG9yZS+UjBElWS0lbS0lZFQlSDolTTolU5SMDwotLS0gQ2xvbmVkIHRvIJSMAy0tLZRLAYwhCi0tLSBNYXRlcmlhbGl6ZSBmZWF0dXJlIHN0b3JlLS0tlIwubW92aWUtcmVjb21tZW5kYXRpb24tc3lzdGVtL2ZlYXN0L2ZlYXR1cmVfcmVwb5SMAmxzlIwFZmVhc3SUjBdtYXRlcmlhbGl6ZS1pbmNyZW1lbnRhbJSMHQotLS0gQWRkaW5nIGNoYW5nZXMgdG8gZ2l0LS0tlIwDZ2l0lIwGc3RhdHVzlIwdCi0tLSBDb21taXQgY2hhbmdlcyB0byBnaXQtLS2UjBxVcGRhdGUgcmVnaXN0cnkuZGIgYnkgcHl0aG9ulIwdCi0tLSBQdXNpbmcgY2hhbmdlcyB0byBnaXQtLS2UKGgWjARwdXNolIwGb3JpZ2lulIwEbWFpbpR0lIwERG9uZZR0lCiMAm9zlIwDc3lzlIwGam9ibGlilGgTjApzdWJwcm9jZXNzlGgJjAR0aW1llIwDR2l0lIwDbm93lIwIc3RyZnRpbWWUjAVjbG9uZZSMBXByaW50lIwEZXhpdJSMBWNoZGlylIwDcnVulIwEZGlmZpSMBmFwcGVuZJSMBmFfcGF0aJSMC2FkZF9jaGFuZ2VzlIwGY29tbWl0lIwJRXhjZXB0aW9ulHSUKGghaCJoI2gTaCRoCWglaBaMCHJlcG9fdXJslIwKbG9jYWxfcGF0aJSMDUZPUk1BVF9TVFJJTkeUaCeMDWNsb25lX3N1Y2Nlc3OUjAVkaWZmc5SMBWZpbGVzlIwBZJSMAWWUdJSMbi9ob21lL21hbnBtL0RldmVsb3BlcnMvTUxPcHMtbW9kdWxlLTMtNC9tb3ZpZS1yZWNvbW1lbmRhdGlvbi1zeXN0ZW0vLi9jb21wb25lbnRzL21hdGVyaWFsaXppbmdfZnMvY29tcG9uZW50LnB5lIwZbWF0ZXJpYWxpemVfZmVhdHVyZV9zdG9yZZRLDENOEAEIAQgBCAEIAQwBCAEGAgQCBAEEAQICCAEKAQwCBAESAQoCCAMOAQoBEAIIAwQBCAEMAQwBCAMKAQ4BCAQKAQgBDgEOAQ4BFgEIgAL/lCkpdJRSlH2UKIwLX19wYWNrYWdlX1+UTowIX19uYW1lX1+UjAhfX21haW5fX5SMCF9fZmlsZV9flGg+dU5OTnSUUpSMHGNsb3VkcGlja2xlLmNsb3VkcGlja2xlX2Zhc3SUjBJfZnVuY3Rpb25fc2V0c3RhdGWUk5RoSX2UfZQoaEVoP4wMX19xdWFsbmFtZV9flGg/jA9fX2Fubm90YXRpb25zX1+UfZSMDl9fa3dkZWZhdWx0c19flE6MDF9fZGVmYXVsdHNfX5ROjApfX21vZHVsZV9flGhGjAdfX2RvY19flE6MC19fY2xvc3VyZV9flE6MF19jbG91ZHBpY2tsZV9zdWJtb2R1bGVzlF2UjAtfX2dsb2JhbHNfX5R9lGgmaACMFF9tYWtlX3NrZWxldG9uX2NsYXNzlJOUKIwIYnVpbHRpbnOUjAR0eXBllJOUaCZoXYwGb2JqZWN0lJOUhZR9lGhUjBFjb21tb24uZ2l0X2NvbW1vbpRzjCBhNDBiZTY1NzllNzQ0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'))

      import argparse
      _parser = argparse.ArgumentParser(prog='Materialize feature store', description='')
      _parsed_args = vars(_parser.parse_args())

      _outputs = materialize_feature_store(**_parsed_args)
    args: []
